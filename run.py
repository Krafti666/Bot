from random import choice
from ast import literal_eval
import asyncio
import logging
from aiogram import types
from aiogram import Bot,Dispatcher,F
from aiogram.filters import Command
from aiogram.types import Message,CallbackQuery
from config import token
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from kb import *

from peewee import *
bot = Bot(token=token)
dp = Dispatcher()

last_message_id = None

is_customized = False
offset_base = 0 #–∫–∞–∫–∞—è –º–æ–¥–µ–ª—å —â—è
which_photo_is_now = 0

class Models(Model):
    Id = AutoField(primary_key=True)
    name = CharField()
    description =  CharField()
    photos = CharField()

    class Meta:

        database = SqliteDatabase("Bot_data.sqlite")
        table_name = "Models"
Models.create_table()

@dp.message(Command("start"))
async def start(message: Message):
    await message.answer_photo(
        photo="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOXr8JqnQSpu71JiVDLAC9RyuKEQCLMwjXp3CzCMY6_g&s",
        caption="""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecretRoom!

–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –¥–µ–≤–æ—á–µ–∫ –¥–ª—è –∏–Ω—Ç–∏–º–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.

–í—ã–¥–∞—á–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏, –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö, —á–µ—Ä–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞!

–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å Telegram, –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!""",
        reply_markup=kb_basic)

# ------------------------------------------- –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

@dp.message(Command("customize"))
async def customize(message:Message):
    global is_customized
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —á—Ç–æ–±—ã –∏–∑–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞:")
    is_customized = True

@dp.message(F.text == "0512")
async def customize_data(message:Message):
    global is_customized

    if is_customized:
        await message.answer("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",reply_markup=kb_what_to_do)

# -------------------------------------------- –ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

@dp.callback_query(F.data == "Models")
async def Models_main(callback:CallbackQuery):
    await callback.answer("")
    photo = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().photos)
    description = (Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().name)
    otziv = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().description)

    await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now],caption=description),reply_markup=kb_models_first)
    # (, caption="–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ –ø–æ–≤–æ–¥—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"), reply_markup = kb_models_middle)

@dp.callback_query(F.data == "Profile")
async def Profile(callback:CallbackQuery):
    await callback.answer("")
    await callback.message.edit_media(media=types.InputMediaPhoto(media="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOXr8JqnQSpu71JiVDLAC9RyuKEQCLMwjXp3CzCMY6_g&s",caption=f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å:

‚ùï –í–∞—à ID - 423

üèôÔ∏è –¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ -

üóÇ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ - 75096
‚≠êÔ∏è –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥ - 5
üîÆ –°–≤–æ–±–æ–¥–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π - {Models.select(fn.MAX(Models.Id)).scalar()}"""),reply_markup=kb_profile)

@dp.callback_query(F.data == "Info") # –°–¥–µ–ª–∞–ª
async def Info(callback:CallbackQuery):
    await callback.answer("")
    await callback.message.edit_media(media=types.InputMediaPhoto(media="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOXr8JqnQSpu71JiVDLAC9RyuKEQCLMwjXp3CzCMY6_g&s",caption="""
–î–æ—Ä–æ–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏,

–•–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞. –¢–µ–ø–µ—Ä—å –≤–∞–º –±–æ–ª—å—à–µ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞—Ç—Ä–∞—á–∏–≤–∞—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—Å–∏–ª–∏–π –Ω–∞ –ø–æ–∏—Å–∫ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ—Å—É–≥.

–ú—ã —Å–æ–∑–¥–∞–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å —É—á–µ—Ç–æ–º —É–¥–æ–±—Å—Ç–≤–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –±—ã—Å—Ç—Ä–µ–µ –∏ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–º, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.

–ü–æ—á–µ–º—É –±—ã –≤–∞–º –Ω–µ –∏–∑–±–µ–∂–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π –≤ –ø–æ–∏—Å–∫–∞—Ö —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è?

–û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç —É–¥–µ–ª–∏—Ç—å —Ç–æ–º—É, —á—Ç–æ –º—ã –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞–µ–º—Å—è –ø–æ–ª–∏—Ç–∏–∫–∏ –ø–æ–ª–Ω–æ–π –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –Ω–µ —Ç—Ä–µ–±—É–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∞—à–µ–≥–æ —ç—Å–∫–æ—Ä—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞"""),
                                      reply_markup=kb_info)



@dp.callback_query(F.data == "Help")  # –°–¥–µ–ª–∞–ª
async def Help(callback:CallbackQuery):
    await callback.answer("")
    await callback.message.edit_media(media=types.InputMediaPhoto(media="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOXr8JqnQSpu71JiVDLAC9RyuKEQCLMwjXp3CzCMY6_g&s",
        caption="""–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —ç—Å–∫–æ—Ä—Ç-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ª—é–±—ã—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º. –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –Ω–µ—ë, –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ, –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π —É—Å–ª—É–≥, –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞. 

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ø–æ–º–æ—â—å, —Å–æ–±–ª—é–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:
1. –ü—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã –±—É–¥—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã. –£–∫–∞–∂–∏—Ç–µ –¥–µ—Ç–∞–ª–∏, –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤–µ–ª–∏ –∫ –ø—Ä–æ–±–ª–µ–º–µ.
2. –°–æ–±–ª—é–¥–∞–π—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
3. –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –∫–∞—Å–∞–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ.

–°—Ä–æ–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–ª–µ–±–ª—é—Ç—Å—è:
- –ü–µ—Ä–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (10 –º–∏–Ω—É—Ç): –ë—ã—Å—Ç—Ä—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ—à–µ–Ω—ã –±—ã—Å—Ç—Ä–æ.
- –í—Ç–æ—Ä–æ–π —É—Ä–æ–≤–µ–Ω—å (30 –º–∏–Ω—É—Ç - 1 —á–∞—Å): –°–ª–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ—à–µ–Ω–∏—è.

–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–æ–∑–Ω–∏–∫—à–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ —ç—Å–∫–æ—Ä—Ç-–∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –±–µ–∑ –ø–µ—Ä–µ–±–æ–µ–≤."""),
        reply_markup=kb_help)

@dp.callback_query(F.data == "Return_to_main_menu")
async def Return_to_main_mani(callback: CallbackQuery):
    global offset_base
    offset_base = 0
    await callback.answer("")
    await callback.message.edit_media(media=types.InputMediaPhoto(media="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOXr8JqnQSpu71JiVDLAC9RyuKEQCLMwjXp3CzCMY6_g&s",
        caption="""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SecretRoom!

–£ –Ω–∞—Å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª—É—á—à–∏—Ö –¥–µ–≤–æ—á–µ–∫ –¥–ª—è –∏–Ω—Ç–∏–º–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.

–í—ã–¥–∞—á–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏, –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö, —á–µ—Ä–µ–∑ –∫—É—Ä–∞—Ç–æ—Ä–∞!

–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–π –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∞–¥—Ä–µ—Å Telegram, –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å!"""),
        reply_markup=kb_basic)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
# ---------------------------------------------------------------------------
class ModelStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_photos = State()


@dp.callback_query(F.data == "Do_model")
async def start_model_creation(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏:")
    await state.set_state(ModelStates.waiting_for_name)

@dp.message(ModelStates.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–∑—ã–≤—ã –æ –º–æ–¥–µ–ª–µ –≤ list-—Ñ–æ—Ä–º–∞—Ç–µ(['–Ω–∞–ø—Ä–∏–º–µ—Ä 1 –æ—Ç–∑—ã–≤','2 –æ—Ç–∑—ã–≤'] –∏ —Å–∞–º–∏ –æ—Ç–∑—ã–≤—ã –ø–∏—Å–∞—Ç—å –≤ —Å–∫–æ–±–æ—á–∫–∞—Ö –ø–æ —Ç–∞–∫–æ–º—É –ø—Ä–∏—Ü–Ω–∏–ø—É:\n ['—Å–æ—Å–∫–∞','–ø—É—à–∫–∞','–∏–º–±—É–ª—è']):")
    await state.set_state(ModelStates.waiting_for_description)

@dp.message(ModelStates.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ 10 —Ñ–æ—Ç–æ –º–æ–¥–µ–ª–∏. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':")
    await state.update_data(photos=[])
    await state.set_state(ModelStates.waiting_for_photos)

@dp.message(ModelStates.waiting_for_photos, F.photo)
async def process_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])

    if len(photos) < 10:
        photo = message.photo[-1]
        photos.append(photo.file_id)
        await state.update_data(photos=photos)
        await message.answer(
            f"–§–æ—Ç–æ {len(photos)} –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â–µ –¥–æ {10 - len(photos)} —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
    else:
        await message.answer("–í—ã —É–∂–µ –¥–æ–±–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ (10). –ù–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")


@dp.message(ModelStates.waiting_for_photos, F.text.casefold() == "–≥–æ—Ç–æ–≤–æ")
async def finalize_model(message: Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get('photos', [])

    if not photos:
        await message.answer("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return

    await message.answer(
        f"–ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n–ò–º—è: {data['name']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ: {len(photos)}")

    for photo_id in photos:
        await message.answer_photo(photo=photo_id)

    Models.insert(data).execute()
# ---------------------------------------------------------------------------

@dp.callback_query(F.data == "Next_photo")
async def Models_next_photo(callback: CallbackQuery):
    global which_photo_is_now
    await callback.answer("")
    which_photo_is_now += 1

    photo = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().photos)
    description = (Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().name)

    if len(photo) >= which_photo_is_now + 1:
        if len(photo) != which_photo_is_now + 1:
            if offset_base + 1 == Models.select(fn.MAX(Models.Id)).scalar():
                await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now], caption=description),reply_markup=kb_models_photo_last_plus_model_last)
            elif offset_base >= 1:
                await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now], caption=description),reply_markup=kb_models_photo_middle_plus_model_middle)
            else:
                await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now],caption=description),reply_markup=kb_models_photo_middle)
        else:
            await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now],caption=description),reply_markup=kb_models_photo_last)




@dp.callback_query(F.data == "Previous_photo")
async def Models_next_photo(callback: CallbackQuery):
    global which_photo_is_now
    await callback.answer("")
    which_photo_is_now -= 1

    photo = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().photos)
    description = (Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().name)

    if 0 <= which_photo_is_now:
        if which_photo_is_now != 0:
            await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now],caption=description),reply_markup=kb_models_photo_middle)
        else:
            await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now], caption=description),reply_markup=kb_models_photo_first)




@dp.callback_query(F.data == "Next_tyan")
async def Next_tyan(callback:CallbackQuery):
    global offset_base,which_photo_is_now
    which_photo_is_now = 0
    offset_base += 1

    await callback.answer("")

    photo = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().photos)
    description = (Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().name)

    if Models.select(fn.MAX(Models.Id)).scalar() >= offset_base +1:
        if Models.select(fn.MAX(Models.Id)).scalar() != offset_base +1:
            await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now],caption=description),reply_markup=kb_models_middle)
        else:
            await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now], caption=description),reply_markup=kb_models_last)


@dp.callback_query(F.data == "Previous_tyan")
async def Previous_tyan(callback:CallbackQuery):
    global offset_base, which_photo_is_now
    which_photo_is_now = 0
    offset_base -= 1

    await callback.answer("")

    photo = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().photos)
    description = (Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().name)

    if 0 <= offset_base:
        if offset_base != 0:
            await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now], caption=description),reply_markup=kb_models_middle)

        else:
            await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now], caption=description),reply_markup=kb_models_first)



@dp.callback_query(F.data == "Otzivs")
async def Otzvivi(callback:CallbackQuery):
    global which_otziv_is_now

    await callback.answer("")

    photo = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().photos)
    otzivi = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().description)

    await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now], caption=f"""üíï–û—Ç–∑—ã–≤—ã –æ –º–æ–¥–µ–ª–∏: \n\n{choice(otzivi)}"""),reply_markup=kb_otzivi)

@dp.callback_query(F.data == "otzivs_write")
async def Otzvivi_wite(callback:CallbackQuery):
    await callback.answer("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞ –º–æ–¥–µ–ª–∏!")

class Form(StatesGroup):
    message = State()

@dp.callback_query(F.data == "Napisat")
async def Napisat(callback:CallbackQuery):
    global last_message_id
    await callback.answer("")
    await callback.message.answer("üì§–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏.")

@dp.callback_query(F.data == "Zakazat")
async def Napisat(callback:CallbackQuery):
    await callback.answer("")
    photo = literal_eval(Models.select().order_by(Models.Id).offset(offset_base).limit(1).first().photos)
    await callback.message.edit_media(media=types.InputMediaPhoto(media=photo[which_photo_is_now], caption="–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ –ø–æ–≤–æ–¥—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è"),reply_markup=kb_models_middle)











async def main():
    await dp.start_polling(bot)
if __name__ == "__main__":
    asyncio.run(main())